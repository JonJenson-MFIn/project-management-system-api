package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"fmt"

	"github.com/JonJenson-MFIn/project-management-system-api/db"
	"github.com/JonJenson-MFIn/project-management-system-api/graph/generated"
	"github.com/JonJenson-MFIn/project-management-system-api/graph/model"
)

func (r *mutationResolver) AddEmployee(ctx context.Context, input model.EmployeeInput) (*model.Employee, error) {
	newEmployee := db.Employee{
		Name:              input.Name,
		Email:             input.Email,
		Password:          *input.Password,
		Role:              db.RoleDB(input.Role),
		Active:            true,
		ProjectAssignedID: input.ProjectID,
	}

	if err := r.DB.Create(&newEmployee).Error; err != nil {
		return nil, fmt.Errorf("failed to create employee: %w", err)
	}

	return &model.Employee{
		ID:     newEmployee.ID,
		Name:   newEmployee.Name,
		Email:  newEmployee.Email,
		Role:   model.Role(newEmployee.Role),
		Active: newEmployee.Active,
	}, nil
}

// UpdateEmployee is the resolver for the updateEmployee field.
func (r *mutationResolver) UpdateEmployee(ctx context.Context, id string, input model.EmployeeInput) (*model.Employee, error) {
	panic(fmt.Errorf("not implemented: UpdateEmployee - updateEmployee"))
}

// DeleteEmployee is the resolver for the deleteEmployee field.
func (r *mutationResolver) DeleteEmployee(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteEmployee - deleteEmployee"))
}

// AddProject is the resolver for the addProject field.
func (r *mutationResolver) AddProject(ctx context.Context, input model.ProjectInput) (*model.Project, error) {
	panic(fmt.Errorf("not implemented: AddProject - addProject"))
}

// UpdateProject is the resolver for the updateProject field.
func (r *mutationResolver) UpdateProject(ctx context.Context, id string, input model.ProjectInput) (*model.Project, error) {
	panic(fmt.Errorf("not implemented: UpdateProject - updateProject"))
}

// DeleteProject is the resolver for the deleteProject field.
func (r *mutationResolver) DeleteProject(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteProject - deleteProject"))
}

// AddTeam is the resolver for the addTeam field.
func (r *mutationResolver) AddTeam(ctx context.Context, input model.TeamInput) (*model.Team, error) {
	panic(fmt.Errorf("not implemented: AddTeam - addTeam"))
}

// UpdateTeam is the resolver for the updateTeam field.
func (r *mutationResolver) UpdateTeam(ctx context.Context, id string, input model.TeamInput) (*model.Team, error) {
	panic(fmt.Errorf("not implemented: UpdateTeam - updateTeam"))
}

// DeleteTeam is the resolver for the deleteTeam field.
func (r *mutationResolver) DeleteTeam(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteTeam - deleteTeam"))
}

// AddTicket is the resolver for the addTicket field.
func (r *mutationResolver) AddTicket(ctx context.Context, input model.TicketInput) (*model.Ticket, error) {
	panic(fmt.Errorf("not implemented: AddTicket - addTicket"))
}

// UpdateTicket is the resolver for the updateTicket field.
func (r *mutationResolver) UpdateTicket(ctx context.Context, id string, input model.TicketInput) (*model.Ticket, error) {
	panic(fmt.Errorf("not implemented: UpdateTicket - updateTicket"))
}

// DeleteTicket is the resolver for the deleteTicket field.
func (r *mutationResolver) DeleteTicket(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteTicket - deleteTicket"))
}

// AddTask is the resolver for the addTask field.
func (r *mutationResolver) AddTask(ctx context.Context, input model.TaskInput) (*model.Task, error) {
	panic(fmt.Errorf("not implemented: AddTask - addTask"))
}

// UpdateTask is the resolver for the updateTask field.
func (r *mutationResolver) UpdateTask(ctx context.Context, id string, input model.TaskInput) (*model.Task, error) {
	panic(fmt.Errorf("not implemented: UpdateTask - updateTask"))
}

// DeleteTask is the resolver for the deleteTask field.
func (r *mutationResolver) DeleteTask(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteTask - deleteTask"))
}

// AddNotification is the resolver for the addNotification field.
func (r *mutationResolver) AddNotification(ctx context.Context, message string, employeeID string) (*model.Notification, error) {
	panic(fmt.Errorf("not implemented: AddNotification - addNotification"))
}

// MarkNotificationRead is the resolver for the markNotificationRead field.
func (r *mutationResolver) MarkNotificationRead(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: MarkNotificationRead - markNotificationRead"))
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
