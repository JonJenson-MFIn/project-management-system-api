// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
	"time"
)

type Employee struct {
	ID              string   `json:"id"`
	Name            string   `json:"name"`
	Email           string   `json:"email"`
	Role            Role     `json:"role"`
	Active          bool     `json:"active"`
	ProjectAssigned *Project `json:"project_assigned,omitempty"`
}

type EmployeeInput struct {
	Name      string  `json:"name"`
	Role      Role    `json:"role"`
	Email     string  `json:"email"`
	Password  *string `json:"password,omitempty"`
	ProjectID *string `json:"projectID,omitempty"`
}

type LoginDetailsInput struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

type Mutation struct {
}

type Notification struct {
	ID        string    `json:"id"`
	Message   string    `json:"message"`
	Employee  *Employee `json:"employee"`
	CreatedAt time.Time `json:"createdAt"`
	Read      bool      `json:"read"`
}

type Project struct {
	ID          string    `json:"id"`
	Manager     *Employee `json:"manager,omitempty"`
	Teams       []*Team   `json:"teams,omitempty"`
	Name        string    `json:"name"`
	Status      Status    `json:"status"`
	Tickets     []*Ticket `json:"tickets,omitempty"`
	Description *string   `json:"description,omitempty"`
	StartDate   time.Time `json:"startDate"`
}

type ProjectInput struct {
	Name        string   `json:"name"`
	ManagerID   *string  `json:"managerID,omitempty"`
	TeamIDs     []string `json:"teamIDs,omitempty"`
	Status      *Status  `json:"status,omitempty"`
	Description *string  `json:"description,omitempty"`
}

type Query struct {
}

type Task struct {
	ID          string     `json:"id"`
	Title       string     `json:"title"`
	Description *string    `json:"description,omitempty"`
	AssignedTo  *Employee  `json:"assignedTo"`
	DueDate     *string    `json:"dueDate,omitempty"`
	Status      Status     `json:"status"`
	CreatedAt   time.Time  `json:"createdAt"`
	CompletedAt *time.Time `json:"completedAt,omitempty"`
}

type TaskInput struct {
	Title        string  `json:"title"`
	Description  *string `json:"description,omitempty"`
	AssignedToID *string `json:"assignedToID,omitempty"`
	DueDate      *string `json:"dueDate,omitempty"`
	Status       Status  `json:"status"`
}

type Team struct {
	ID         string      `json:"id"`
	TeamLeader *Employee   `json:"teamLeader,omitempty"`
	Engineers  []*Employee `json:"engineers,omitempty"`
}

type TeamInput struct {
	TeamLeaderID string   `json:"teamLeaderID"`
	EngineerIDs  []string `json:"engineerIDs"`
}

type Ticket struct {
	ID          string     `json:"id"`
	Status      Status     `json:"status"`
	Title       string     `json:"title"`
	Description *string    `json:"description,omitempty"`
	CreatedAt   time.Time  `json:"createdAt"`
	CompletedAt *time.Time `json:"completedAt,omitempty"`
	Project     *Project   `json:"project"`
}

type TicketInput struct {
	Title       string  `json:"title"`
	Description *string `json:"description,omitempty"`
	ProjectID   string  `json:"projectID"`
	Status      Status  `json:"status"`
}

type Role string

const (
	RoleAdmin    Role = "ADMIN"
	RoleEmployee Role = "EMPLOYEE"
	RoleTl       Role = "TL"
	RoleManager  Role = "MANAGER"
)

var AllRole = []Role{
	RoleAdmin,
	RoleEmployee,
	RoleTl,
	RoleManager,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleEmployee, RoleTl, RoleManager:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *Role) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e Role) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type Status string

const (
	StatusNotStarted Status = "NOT_STARTED"
	StatusInProgress Status = "IN_PROGRESS"
	StatusCompleted  Status = "COMPLETED"
	StatusOnHold     Status = "ON_HOLD"
	StatusCancelled  Status = "CANCELLED"
)

var AllStatus = []Status{
	StatusNotStarted,
	StatusInProgress,
	StatusCompleted,
	StatusOnHold,
	StatusCancelled,
}

func (e Status) IsValid() bool {
	switch e {
	case StatusNotStarted, StatusInProgress, StatusCompleted, StatusOnHold, StatusCancelled:
		return true
	}
	return false
}

func (e Status) String() string {
	return string(e)
}

func (e *Status) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Status(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}

func (e Status) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *Status) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e Status) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
